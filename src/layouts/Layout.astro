---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';

interface Props {
  title: string;
  description?: string;
}

const { 
  title = "Simon Rost | Software Developer",
  description = "Personal portfolio of Simon Rost, a software developer transitioning from NGO management to tech."
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    
    <!-- Open Graph / Social Media Meta Tags -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    
    <!-- Add theme-color for browser tabs on mobile -->
    <meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)" />
    <meta name="theme-color" content="#121212" media="(prefers-color-scheme: dark)" />
  </head>
  <body>
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
    
    <script>
      // Add fade-in animation to elements
      document.addEventListener('DOMContentLoaded', () => {
        const fadeElements = document.querySelectorAll('.fade-in');
        
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const target = entry.target as HTMLElement;
              target.style.animationDelay = `${target.dataset.delay || 0}s`;
              target.style.animationPlayState = 'running';
              observer.unobserve(target);
            }
          });
        }, {
          threshold: 0.1
        });
        
        fadeElements.forEach(element => {
          (element as HTMLElement).style.animationPlayState = 'paused';
          observer.observe(element);
        });
      });
    </script>
  </body>
</html>

<style>
  main {
    padding-top: 60px; /* Header height */
    min-height: calc(100vh - 60px - 100px); /* Full height minus header and footer */
  }
</style>