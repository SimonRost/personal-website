---
import Layout from '../../layouts/Layout.astro';
import { getLanguageFromUrl, t } from '../../i18n/utils';

const currentLang = getLanguageFromUrl(Astro.url);

// Example projects (same data as your original, but with German descriptions)
const projects = [
  {
    "id": 1,
    "title": "QuickNote to Obsidian",
    "description": "Ein Python-basiertes Tool, das es Benutzern ermöglicht, schnell Notizen zu erstellen und sie direkt als Obsidian-kompatible Markdown-Dateien zu speichern. Bietet anpassbare Speicherorte und globale Hotkey-Unterstützung für schnelle Notizen.",
    "tags": ["Python", "Tkinter", "Obsidian", "Produktivität"],
    "image": "https://images.pexels.com/photos/669615/pexels-photo-669615.jpeg?auto=compress&cs=tinysrgb&w=600",
    "link": "#",
    "github": "https://github.com/SimonRost/quicknote-to-obsidian"
  },
  {
    "id": 2,
    "title": "Übung: ISS Overhead Alert",
    "description": "Ein Python-Skript, das Benutzer über Telegram benachrichtigt, wenn die Internationale Raumstation ISS über ihnen ist. Nutzt Echtzeit-API-Daten zur ISS-Positionsbestimmung und sendet entsprechende Benachrichtigungen.",
    "tags": ["Python", "API Integration", "Telegram Bot", "Astronomie"],
    "image": "https://images.pexels.com/photos/2448749/pexels-photo-2448749.jpeg?auto=compress&cs=tinysrgb&w=600",
    "link": "#",
    "github": "https://github.com/SimonRost/practice-api-iss-alert"
  },
  {
    "id": 3,
    "title": "Übung: Tkinter Pomodoro Timer",
    "description": "Eine einfache Pomodoro-Timer-Anwendung, erstellt mit Pythons Tkinter-Bibliothek. Hilft Benutzern dabei, ihre Arbeitssitzungen und Pausen zu verwalten, um die Produktivität zu steigern.",
    "tags": ["Python", "Tkinter", "Produktivität", "Zeitmanagement"],
    "image": "https://images.pexels.com/photos/3184339/pexels-photo-3184339.jpeg?auto=compress&cs=tinysrgb&w=600",
    "link": "#",
    "github": "https://github.com/SimonRost/practice-tkinter-pomodoro-timer"
  },
  {
    "id": 4,
    "title": "Übung: Passwort Generator",
    "description": "Eine Desktop-Anwendung zur Generierung sicherer Passwörter. Mit Tkinter erstellt, ermöglicht es Benutzern, Länge und Zeichentypen für robuste Passwort-Generierung anzupassen.",
    "tags": ["Python", "Tkinter", "Sicherheit", "Utility"],
    "image": "https://images.pexels.com/photos/1181671/pexels-photo-1181671.jpeg?auto=compress&cs=tinysrgb&w=600",
    "link": "#",
    "github": "https://github.com/SimonRost/practice-tkinter-password-gen"
  },
  {
    "id": 5,
    "title": "Übung: Stock Trading Alert",
    "description": "Ein Python-basiertes Warnsystem, das Echtzeit-Aktiendaten verwendet und Telegram-Nachrichten sendet, wenn vordefinierte Schwellenwerte erreicht werden. Entwickelt für Gelegenheitshändler, die bestimmte Aktien überwachen.",
    "tags": ["Python", "API Integration", "Telegram Bot", "Finanzen"],
    "image": "https://images.pexels.com/photos/210607/pexels-photo-210607.jpeg?auto=compress&cs=tinysrgb&w=600",
    "link": "#",
    "github": "https://github.com/SimonRost/practice-api-stock-trading-alert"
  },
  {
    "id": 6,
    "title": "CS Learning Journey",
    "description": "Ein umfassendes Repository, das meine Reise in die Informatik dokumentiert. Enthält verschiedene Projekte, Notizen und Ressourcen zur Vorbereitung auf das Informatikstudium.",
    "tags": ["Lernen", "Dokumentation", "Bildung"],
    "image": "https://images.pexels.com/photos/230544/pexels-photo-230544.jpeg?auto=compress&cs=tinysrgb&w=600",
    "link": "#",
    "github": "https://github.com/SimonRost/cs-learning-journey"
  }
];

// Get unique tags for filtering
const allTags = [...new Set(projects.flatMap(project => project.tags))];
---

<Layout title={`${t('projects.title', currentLang)} | Simon Rost`}>
  <section class="projects-section">
    <div class="container">
      <div class="projects-header fade-in" data-delay="0.1">
        <h1>{t('projects.title', currentLang)}</h1>
        <div class="subtitle">{t('projects.subtitle', currentLang)}</div>
      </div>
      
      <div class="filter-options fade-in" data-delay="0.2">
        <button class="filter-btn active" data-filter="all">{t('projects.all', currentLang)}</button>
        {allTags.map(tag => (
          <button class="filter-btn" data-filter={tag}>{tag}</button>
        ))}
      </div>
      
      <div class="projects-grid">
        {projects.map((project, index) => (
          <div class="project-card fade-in" data-delay={0.3 + index * 0.1} data-tags={project.tags.join(',')}>
            <div class="project-image">
              <img src={project.image} alt={project.title} loading="lazy" />
            </div>
            <div class="project-content">
              <h3>{project.title}</h3>
              <p>{project.description}</p>
              <div class="project-bottom">
                <div class="project-tags">
                  {project.tags.map(tag => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              </div>
              <div class="project-links">
                <a href={project.link} class="btn" target="_blank" rel="noopener noreferrer">Demo ansehen</a>
                <a href={project.github} class="btn btn-outline" target="_blank" rel="noopener noreferrer">GitHub</a>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>
</Layout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const projectCards = document.querySelectorAll('.project-card');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Update active button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        const filter = button.getAttribute('data-filter');
        
        projectCards.forEach(card => {
          if (filter === 'all') {
            card.style.display = 'block';
          } else {
            const tags = card.getAttribute('data-tags').split(',');
            if (tags.includes(filter)) {
              card.style.display = 'block';
            } else {
              card.style.display = 'none';
            }
          }
        });
      });
    });
  });
</script>

<style>
  .projects-section {
    padding: var(--spacing-xl) 0;
  }
  
  .projects-header {
    text-align: center;
    margin-bottom: var(--spacing-lg);
  }
  
  .subtitle {
    color: var(--color-text-muted);
    font-size: 1.25rem;
    max-width: 600px;
    margin: 0 auto;
  }
  
  .filter-options {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-xl);
  }
  
  .filter-btn {
    background-color: transparent;
    border: 1px solid var(--color-border);
    color: var(--color-text-muted);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all var(--transition-quick);
  }
  
  .filter-btn:hover, .filter-btn.active {
    background-color: var(--color-primary-muted);
    color: var(--color-primary);
    border-color: var(--color-primary);
  }
  
  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: var(--spacing-lg);
  }
  
  .project-card {
    display: flex;
    flex-direction: column;
    height: 100%;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px var(--color-card-shadow);
    background-color: var(--color-card);
    transition: transform var(--transition-normal), box-shadow var(--transition-normal);
  }
  
  .project-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 10px 20px var(--color-card-shadow);
  }
  
  .project-image {
    height: 200px;
    overflow: hidden;
    flex-shrink: 0;
  }
  
  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-normal);
  }
  
  .project-card:hover .project-image img {
    transform: scale(1.05);
  }
  
  .project-content {
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    padding: var(--spacing-lg);
  }
  
  .project-bottom {
    display: flex;
    flex-direction: column;
    margin-top: auto;
  }

  .project-content h3 {
    margin-bottom: var(--spacing-sm);
  }
  
  .project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
    margin: var(--spacing-md) 0;
    order: 1;
  }
  
  .tag {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    background-color: var(--color-primary-muted);
    color: var(--color-primary);
    border-radius: 4px;
  }
  
  .project-links {
    display: flex;
    gap: var(--spacing-sm);
    margin-top: var(--spacing-md);
    margin-bottom: 0;
    order: 2;
  }
  
  .project-links .btn {
    flex: 1;
    text-align: center;
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
  }
  
  @media (max-width: 768px) {
    .projects-grid {
      grid-template-columns: 1fr;
    }
    
    .project-links {
      flex-direction: column;
    }
  }
</style>